library(jsonlite)
source('~/.active-rstudio-document')
document
document <- fromJSON("/Users/juanbanda/Downloads/VeteransCrisisLineFY11FOIA1500242.json")
View(document)
View(document)
library(jsonlite)
document <- fromJSON("/Users/juanbanda/Downloads/VeteransCrisisLineFY14FOIA1500242.json")
View(document)
document <- fromJSON("/Users/juanbanda/Downloads/VeteransCrisisLineFY13FOIA1500242.json")
View(document)
document <- fromJSON("/Users/juanbanda/Downloads/VeteransCrisisLineFY12FOIA1500242.json")
View(document)
admission_ds <- read.table("/Users/juanbanda/Downloads/ICPSR_35037/DS0001/35037-0001-Data.tsv",sep="\t", header=TRUE)
View(admission_ds)
veterans <- subset(admission_ds,admission_ds$VET=1)
veterans <- subset(admission_ds,admission_ds$VET==1)
View(veterans)
set.seed(1234)
fit.km <- kmeans(veterans, 3, nstart=25)                           #3
fit.km$size
fit.km$centers
aggregate(veterans[-1], by=list(cluster=fit.km$cluster), mean)
library(cluster)
library(HSAUR)
install.packages(HSAUR)
install.packages("HSAUR")
library(cluster)
library(HSAUR)
data(pottery)
km    <- kmeans(pottery,3)
dissE <- daisy(pottery)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2)
library(cluster)
library(HSAUR)
data(pottery)
km    <- kmeans(pottery,5)
dissE <- daisy(pottery)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2)
mydata <- veterans
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
mydata <- veterans
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i, algorithm="MacQueen")$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
warnings
warnings()
mydata <- veterans
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i, algorithm="MacQueen", iter.max=100)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
View(mydata)
View(mydata)
drops <- c("CBSA", "PMSA", "REGION", "DIVISION", "FRSTUSE3", "FREQ3", "ROUTE3", "SUB3", "FRSTUSE2", "FREQ2","ROUTE2", "SUB2", "FRSTUSE1", "FREQ1", "ROUTE1","SUB1")
veterans[ , !(names(veterans) %in% drops)]
drops <- c("CBSA", "PMSA", "REGION", "DIVISION", "FRSTUSE3", "FREQ3", "ROUTE3", "SUB3", "FRSTUSE2", "FREQ2","ROUTE2", "SUB2", "FRSTUSE1", "FREQ1", "ROUTE1","SUB1")
veterans<-veterans[ , !(names(veterans) %in% drops)]
View(veterans)
drops <- c("CBSA", "PMSA", "REGION", "DIVISION", "FRSTUSE3", "FREQ3", "ROUTE3", "SUB3", "FRSTUSE2", "FREQ2","ROUTE2", "SUB2", "FRSTUSE1", "FREQ1", "ROUTE1","SUB1","YEAR")
veterans<-veterans[ , !(names(veterans) %in% drops)]
mydata <- veterans
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i, algorithm="MacQueen", iter.max=100)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
drops <- c("CBSA", "PMSA", "REGION", "DIVISION", "FRSTUSE3", "FREQ3", "ROUTE3", "SUB3", "FRSTUSE2", "FREQ2","ROUTE2", "SUB2", "FRSTUSE1", "FREQ1", "ROUTE1","SUB1","YEAR", "VET")
veterans<-veterans[ , !(names(veterans) %in% drops)]
mydata <- veterans
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i, algorithm="MacQueen", iter.max=100)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
set.seed(1234)
fit.km <- kmeans(veterans, 4, nstart=25)                           #3
fit.km$size
fit.km$centers
drops <- c("CASEID", "CBSA", "PMSA", "REGION", "DIVISION", "FRSTUSE3", "FREQ3", "ROUTE3", "SUB3", "FRSTUSE2", "FREQ2","ROUTE2", "SUB2", "FRSTUSE1", "FREQ1", "ROUTE1","SUB1","YEAR", "VET")
veterans<-veterans[ , !(names(veterans) %in% drops)]
set.seed(1234)
fit.km <- kmeans(veterans, 4, nstart=25)                           #3
fit.km$size
fit.km$centers
veterans<-veterans[veterans==-9]<-0
veterans <- subset(admission_ds,admission_ds$VET==1)
veterans[veterans==-9]<-0
View(veterans)
drops <- c("CASEID", "CBSA", "PMSA", "REGION", "DIVISION", "FRSTUSE3", "FREQ3", "ROUTE3", "SUB3", "FRSTUSE2", "FREQ2","ROUTE2", "SUB2", "FRSTUSE1", "FREQ1", "ROUTE1","SUB1","YEAR", "VET", "DAYWAIT")
veterans<-veterans[ , !(names(veterans) %in% drops)]
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
dfNorm <- as.data.frame(lapply(veterans, normalize))
View(dfNorm)
View(mydata)
View(veterans)
veterans <- as.data.frame(lapply(veterans, normalize))
View(veterans)
set.seed(1234)
fit.km <- kmeans(veterans, 4, nstart=25)                           #3
fit.km$size
fit.km$centers
admission_ds <- read.table("/Users/juanbanda/Downloads/ICPSR_35037/DS0001/35037-0001-Data.tsv",sep="\t", header=TRUE)
#Get me all veterans only
veterans <- subset(admission_ds,admission_ds$VET==1)
#Data cleaning step
drops <- c("CASEID", "CBSA", "PMSA", "REGION", "DIVISION", "FRSTUSE3", "FREQ3", "ROUTE3", "SUB3", "FRSTUSE2", "FREQ2","ROUTE2", "SUB2", "FRSTUSE1", "FREQ1", "ROUTE1","SUB1","YEAR", "VET", "DAYWAIT")
veterans<-veterans[ , !(names(veterans) %in% drops)]
#######################################
########### Data cleaning #############
#Reduce missing data values to zeros
veterans[veterans==-9]<-0
#Scale each row to a 0-1 range
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
veterans_norm <- as.data.frame(lapply(veterans, normalize))
set.seed(1234)
fit.km <- kmeans(veterans, 4, nstart=25)                           #3
fit.km$size
fit.km$centers
set.seed(1234)
fit_norm.km <- kmeans(veterans_norm, 4, nstart=25)                           #3
fit_norm.km$size
fit_norm.km$centers
install.packages("klaR")
library(klaR)
set.seed(1)
x <- rbind(matrix(rbinom(250, 2, 0.25), ncol = 5),
matrix(rbinom(250, 2, 0.75), ncol = 5))
colnames(x) <- c("a", "b", "c", "d", "e")
## run algorithm on x:
(cl <- kmodes(x, 2))
## and visualize with some jitter:
plot(jitter(x), col = cl$cluster)
points(cl$modes, col = 1:5, pch = 8)
kmos<-kmodes(veterans,4)
set.seed(1234)
fit.km <- kmeans(veterans, 4, nstart=25)                           #3
fit.km$size
fit.km$centers
fit.km$cluster
veterans_labeled<-veterans
veterans_labeled$label<-fit.km$cluster
View(veterans_labeled)
non_veterans <- subset(admission_ds,admission_ds$VET==2)  #We ignore the people with missing data
non_veterans_clean <- subset(non_veterans,non_veterans[non_veterans==-9])
non_veterans!==-9
non_veterans!=-9
non_veterans_clean <- subset(non_veterans,non_veterans[non_veterans!=-9])
non_veterans <- subset(admission_ds,admission_ds$VET==2)  #We ignore the people with missing data
non_veterans <- non_veterans[ , !(names(veterans) %in% drops)]
non_veterans <- non_veterans[ , !(names(non_veterans) %in% drops)]
test<-non_veterans[non_veterans!=-9]
non_veterans[non_veterans==-9]<-0
View(non_veterans)
admission_ds <- read.table("/Users/juanbanda/Downloads/ICPSR_35037/DS0001/35037-0001-Data.tsv",sep="\t", header=TRUE)
#Get me all veterans only
veterans <- subset(admission_ds,admission_ds$VET==1)
#Data cleaning step
drops <- c("CASEID", "CBSA", "PMSA", "REGION", "DIVISION", "FRSTUSE3", "FREQ3", "ROUTE3", "SUB3", "FRSTUSE2", "FREQ2","ROUTE2", "SUB2", "FRSTUSE1", "FREQ1", "ROUTE1","SUB1","YEAR", "VET", "DAYWAIT")
veterans<-veterans[ , !(names(veterans) %in% drops)]
#Clean the non-vets, they will be used as 'controls'
non_veterans <- subset(admission_ds,admission_ds$VET==2)  #We ignore the people with missing data
non_veterans <- non_veterans[ , !(names(non_veterans) %in% drops)]
#######################################
########### Data cleaning #############
#Reduce missing data values to zeros.
veterans[veterans==-9]<-0
non_veterans[non_veterans==-9]<-0
View(veterans)
View(non_veterans)
View(veterans)
set.seed(1234)
fit.km <- kmeans(veterans, 4, nstart=25)
#Create a labeled vector
veterans_labeled<-veterans
veterans_labeled$label<-fit.km$cluster
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
veterans_outcome1 <- subset(veterans_labeled,veterans_labeled$label==1)
veterans_outcome2 <- subset(veterans_labeled,veterans_labeled$label==2)
veterans_outcome3 <- subset(veterans_labeled,veterans_labeled$label==3)
veterans_outcome4 <- subset(veterans_labeled,veterans_labeled$label==4)
size(veterans_outcome1)
nsize(veterans_outcome1)
rowsize(veterans_outcome1)
nrow(veterans_outcome1)
veterans_outcome1 <- subset(veterans_labeled,veterans_labeled$label==1)
veterans_outcome2 <- subset(veterans_labeled,veterans_labeled$label==2)
veterans_outcome3 <- subset(veterans_labeled,veterans_labeled$label==3)
veterans_outcome4 <- subset(veterans_labeled,veterans_labeled$label==4)
#Lets get some randomly sampled 'controls' from the non-vet section
controls_outcome1 <- sample(non_veterans,nrow(veterans_outcome1)*2)
controls_outcome2 <- sample(non_veterans,nrow(veterans_outcome2)*2)
controls_outcome3 <- sample(non_veterans,nrow(veterans_outcome3)*2)
controls_outcome4 <- sample(non_veterans,nrow(veterans_outcome4)*2)
#fix outcome labels
veterans_outcome1$label<-"T"
veterans_outcome2$label<-"T"
veterans_outcome3$label<-"T"
veterans_outcome4$label<-"T"
controls_outcome1$label<-"F"
controls_outcome2$label<-"F"
controls_outcome3$label<-"F"
controls_outcome4$label<-"F"
FV_outcome1<-rbind(veterans_outcome1, controls_outcome1)
FV_outcome2<-rbind(veterans_outcome2, controls_outcome2)
FV_outcome3<-rbind(veterans_outcome3, controls_outcome3)
FV_outcome4<-rbind(veterans_outcome4, controls_outcome4)
nrow(veterans_outcome2)*2
controls_outcome1 <- controls_outcome1[sample(non_veterans,nrow(veterans_outcome1)*2)]
controls_outcome1 <- non_veterans[sample(non_veterans,nrow(veterans_outcome1)*2)]
nrow(non_veterans)
non_veterans$label<-"F"
controls_outcome1 <- non_veterans[sample(non_veterans,nrow(veterans_outcome1)*2)]
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
controls_outcome1 <- sample_n(non_veterans,nrow(veterans_outcome1)*2)]
controls_outcome1 <- sample_n(non_veterans,nrow(veterans_outcome1)*2)
View(controls_outcome1)
controls_outcome1 <- sample_n(non_veterans,nrow(veterans_outcome1)*2)
controls_outcome2 <- sample_n(non_veterans,nrow(veterans_outcome2)*2)
controls_outcome3 <- sample_n(non_veterans,nrow(veterans_outcome3)*2)
controls_outcome4 <- sample_n(non_veterans,nrow(veterans_outcome4)*2)
veterans_outcome1$label<-"T"
veterans_outcome2$label<-"T"
veterans_outcome3$label<-"T"
veterans_outcome4$label<-"T"
FV_outcome1<-rbind(veterans_outcome1, controls_outcome1)
FV_outcome2<-rbind(veterans_outcome2, controls_outcome2)
FV_outcome3<-rbind(veterans_outcome3, controls_outcome3)
FV_outcome4<-rbind(veterans_outcome4, controls_outcome4)
set.seed(998)
inTraining <- createDataPartition(FV_outcome1$label, p = .75, list = FALSE)
training <- FV_outcome1[ inTraining,]
testing  <- FV_outcome1[-inTraining,]
charCols <- c("labels") #Get all the predictors name and remove labels and pid's for model training
predictorsNames <- colnames(training)[!colnames(training) %in% charCols]
cvLabels <- training$label
train_control <- trainControl(method="cv", number=10)
# fix the parameters of the algorithm
grid <- expand.grid(.fL=c(0), .usekernel=c(FALSE))
# train the model
model <- train(x=training[,predictorsNames],y=factor(cvLabels), trControl=train_control, method="nb", tuneGrid=grid)
# summarize results
print(model)
model <- train(x=training[,predictorsNames],y=factor(cvLabels), trControl=train_control, method="nb")
# summarize results
print(model)
install.packages("e1071")
model <- train(x=training[,predictorsNames],y=factor(cvLabels), trControl=train_control, method="nb")
# summarize results
print(model)
beta<-5
labsModelFscore <-((1+beta^2)*model$finalModel$confusion[2,2]) / ( (1+beta^2)*model$finalModel$confusion[2,2] + (beta^2)*model$finalModel$confusion[2,1] + model$finalModel$confusion[1,2])
nbModelFscore
nbModelFscore <-((1+beta^2)*model$finalModel$confusion[2,2]) / ( (1+beta^2)*model$finalModel$confusion[2,2] + (beta^2)*model$finalModel$confusion[2,1] + model$finalModel$confusion[1,2])
nbModelFscore
summary(model)
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
install.packages("pROC")
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
train_control <- trainControl(method="cv", number=10)
# fix the parameters of the algorithm
# train the model
model <- train(x=training[,predictorsNames],y=factor(cvLabels), method="rf",metric = "Fscore", trControl=objControl)
objControl <- trainControl(method="cv", number=10)
# fix the parameters of the algorithm
# train the model
model <- train(x=training[,predictorsNames],y=factor(cvLabels), method="rf",metric = "Fscore", trControl=objControl)
model <- train(x=training[,predictorsNames],y=factor(cvLabels), method="rf",importance = TRUE, trControl=objControl)
set.seed(998)
inTraining <- createDataPartition(FV_outcome1$label, p = .75, list = FALSE)
training <- FV_outcome1[ inTraining,]
testing  <- FV_outcome1[-inTraining,]
charCols <- c("label") #Get all the predictors name and remove labels and pid's for model training
predictorsNames <- colnames(training)[!colnames(training) %in% charCols]
cvLabels <- training$label
objControl <- trainControl(method="cv", number=10)
# fix the parameters of the algorithm
# train the model
model <- train(x=training[,predictorsNames],y=factor(cvLabels), method="rf",importance = TRUE, trControl=objControl)
# summarize results
print(model)
importance <- varImp(model, scale=FALSE)
print(importance)
source('~/Documents/CODE/healthplusplus2016/buildNN.R')
source('~/Documents/CODE/healthplusplus2016/buildNN.R')
mx.model.save(resultingModel, 'mxnet-model',iteration=160)
mx.model.save(resultingModel, 'mxnet-model',iteration=160)
graph.viz(resultingModel$symbol$as.json())
mx.model.save(resultingModel, 'mxnet-model',iteration=160)
setwd("~/Documents/CODE/healthplusplus2016")
mx.model.save(resultingModel, 'mxnet-model',iteration=160)
graph.viz(resultingModel$symbol$as.json())
graph.viz(resultingModel$symbol$as.json())
